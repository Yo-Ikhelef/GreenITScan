name: Build & Push images (GHCR)

on:
  push:
    branches: [ prod ]
  workflow_dispatch: {}

permissions:
  contents: read
  packages: write

concurrency:
  group: build-push-prod
  cancel-in-progress: true

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3
      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}


      - name: Compute image names/tags
        run: |
          set -euo pipefail

          OWNER_LC="${GITHUB_REPOSITORY_OWNER,,}"
          REPO_LC="${GITHUB_REPOSITORY#*/}"
          REPO_LC="${REPO_LC,,}"

          # Doit matcher ton app.yaml (repositories DO) :
          IMG_BACKEND="ghcr.io/${OWNER_LC}/${REPO_LC}/backend"
          IMG_FRONTEND="ghcr.io/${OWNER_LC}/${REPO_LC}/frontend"

          SHORT_SHA="${GITHUB_SHA::7}"
          STABLE_TAG="branch-prod"

          {
            echo "IMG_BACKEND=$IMG_BACKEND"
            echo "IMG_FRONTEND=$IMG_FRONTEND"
            echo "TAG1_BACK=${IMG_BACKEND}:sha-${SHORT_SHA}"
            echo "TAG2_BACK=${IMG_BACKEND}:${STABLE_TAG}"
            echo "TAG1_FRONT=${IMG_FRONTEND}:sha-${SHORT_SHA}"
            echo "TAG2_FRONT=${IMG_FRONTEND}:${STABLE_TAG}"
          } >> "$GITHUB_ENV"

          echo "::notice::IMG_BACKEND=$IMG_BACKEND"
          echo "::notice::TAGS_BACK=$TAG1_BACK , $TAG2_BACK"
          echo "::notice::IMG_FRONTEND=$IMG_FRONTEND"
          echo "::notice::TAGS_FRONT=$TAG1_FRONT , $TAG2_FRONT"

      - name: Build & push backend
        uses: docker/build-push-action@v6
        with:
          context: .
          file: docker-prod/backend/Dockerfile.symfony
          push: true
          tags: |
            ${{ env.TAG1_BACK }}
            ${{ env.TAG2_BACK }}
          platforms: linux/amd64
          cache-from: type=gha,scope=backend
          cache-to: type=gha,scope=backend,mode=max

      - name: Build & push frontend
        uses: docker/build-push-action@v6
        with:
          context: .
          file: docker-prod/frontend/Dockerfile.frontend
          push: true
          tags: |
            ${{ env.TAG1_FRONT }}
            ${{ env.TAG2_FRONT }}
          platforms: linux/amd64
          cache-from: type=gha,scope=frontend
          cache-to: type=gha,scope=frontend,mode=max